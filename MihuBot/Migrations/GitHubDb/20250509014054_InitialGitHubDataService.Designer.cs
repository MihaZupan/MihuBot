// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MihuBot.DB.GitHub;

#nullable disable

namespace MihuBot.Migrations.GitHubDb
{
    [DbContext(typeof(GitHubDbContext))]
    [Migration("20250509014054_InitialGitHubDataService")]
    partial class InitialGitHubDataService
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("IssueInfoLabelInfo", b =>
                {
                    b.Property<long>("IssuesId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LabelsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("IssuesId", "LabelsId");

                    b.HasIndex("LabelsId");

                    b.ToTable("IssueInfoLabelInfo");
                });

            modelBuilder.Entity("MihuBot.DB.GitHub.BodyEditHistoryEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsComment")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PreviousBody")
                        .HasColumnType("TEXT");

                    b.Property<long>("ResourceIdentifier")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("body_edit_history");
                });

            modelBuilder.Entity("MihuBot.DB.GitHub.CommentInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorAssociation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT");

                    b.Property<int>("Confused")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Eyes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Heart")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Hooray")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HtmlUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrReviewComment")
                        .HasColumnType("INTEGER");

                    b.Property<long>("IssueId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Laugh")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Minus1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NodeIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<int>("Plus1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rocket")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UserId");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("MihuBot.DB.GitHub.IssueInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActiveLockReason")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Confused")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Eyes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Heart")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Hooray")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HtmlUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("Laugh")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Locked")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Minus1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NodeIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Plus1")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RepositoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rocket")
                        .HasColumnType("INTEGER");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number");

                    b.HasIndex("RepositoryId");

                    b.HasIndex("UserId");

                    b.ToTable("issues");
                });

            modelBuilder.Entity("MihuBot.DB.GitHub.LabelInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NodeIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<long>("RepositoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RepositoryId");

                    b.ToTable("labels");
                });

            modelBuilder.Entity("MihuBot.DB.GitHub.PullRequestInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("IssueId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IssueId")
                        .IsUnique();

                    b.ToTable("pullrequests");
                });

            modelBuilder.Entity("MihuBot.DB.GitHub.RepositoryInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Archived")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("HtmlUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastIssueCommentsUpdate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastIssuesUpdate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastPullRequestReviewCommentsUpdate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastRepositoryMetadataUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NodeIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<long>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Private")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("repositories");
                });

            modelBuilder.Entity("MihuBot.DB.GitHub.UserInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bio")
                        .HasColumnType("TEXT");

                    b.Property<string>("Company")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EntryUpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Followers")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Following")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HtmlUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NodeIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("IssueInfoLabelInfo", b =>
                {
                    b.HasOne("MihuBot.DB.GitHub.IssueInfo", null)
                        .WithMany()
                        .HasForeignKey("IssuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MihuBot.DB.GitHub.LabelInfo", null)
                        .WithMany()
                        .HasForeignKey("LabelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MihuBot.DB.GitHub.CommentInfo", b =>
                {
                    b.HasOne("MihuBot.DB.GitHub.IssueInfo", "Issue")
                        .WithMany("Comments")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MihuBot.DB.GitHub.UserInfo", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MihuBot.DB.GitHub.IssueInfo", b =>
                {
                    b.HasOne("MihuBot.DB.GitHub.RepositoryInfo", "Repository")
                        .WithMany("Issues")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MihuBot.DB.GitHub.UserInfo", "User")
                        .WithMany("Issues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Repository");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MihuBot.DB.GitHub.LabelInfo", b =>
                {
                    b.HasOne("MihuBot.DB.GitHub.RepositoryInfo", "Repository")
                        .WithMany("Labels")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("MihuBot.DB.GitHub.PullRequestInfo", b =>
                {
                    b.HasOne("MihuBot.DB.GitHub.IssueInfo", "Issue")
                        .WithOne("PullRequest")
                        .HasForeignKey("MihuBot.DB.GitHub.PullRequestInfo", "IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("MihuBot.DB.GitHub.RepositoryInfo", b =>
                {
                    b.HasOne("MihuBot.DB.GitHub.UserInfo", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MihuBot.DB.GitHub.IssueInfo", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PullRequest");
                });

            modelBuilder.Entity("MihuBot.DB.GitHub.RepositoryInfo", b =>
                {
                    b.Navigation("Issues");

                    b.Navigation("Labels");
                });

            modelBuilder.Entity("MihuBot.DB.GitHub.UserInfo", b =>
                {
                    b.Navigation("Issues");
                });
#pragma warning restore 612, 618
        }
    }
}
