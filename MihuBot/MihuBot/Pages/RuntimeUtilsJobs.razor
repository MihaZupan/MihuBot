@page "/runtime-utils/{jobId}"
@using MihuBot.RuntimeUtils;
@using System.Collections.Concurrent;
@inject RuntimeUtilsService runtimeUtils
@implements IDisposable

@if (_job is not null)
{
    <h1><a href="@(_job.GitHubComment?.Url ?? _job.TestedPROrBranchLink)">@_job.JobTitle</a></h1>
    <div>For all the logs, see <a href="@_job.ProgressUrl">@_job.ProgressUrl</a></div>
    @if (_job.TrackingIssue is not null)
    {
        <div>Tracking issue: <a href="@_job.TrackingIssue.HtmlUrl">@_job.TrackingIssue.HtmlUrl</a></div>
    }

    @if (_job.Completed)
    {
        <div>Started at @_completedJob.StartedAt.ToISODateTime(' ') UTC, ran for @_completedJob.Duration.ToElapsedTime().</div>
    }
    else
    {
        <div>The job is still in progress (@_job.GetElapsedTime(includeSeconds: false)). @_job.LastProgressSummary</div>

        @if (_canCancelJob)
        {
            <button class="btn btn-danger" onclick="@(() => _job.FailFast($"Cancelled by {_githubUserLogin}"))">Cancel</button>
        }

        <br />

        @if (_canViewCredentials && _job.RemoteLoginCredentials is { Length: > 0 } remoteLogin)
        {
            <div>@remoteLogin</div>

            @if (_job.ShouldDeleteVM)
            {
                <button class="btn btn-danger" onclick="@(() => _job.ShouldDeleteVM = false)">Do not delete the VM</button>
            }
        }
    }

    @if (_canViewCredentials)
    {
        <p><small class="text-muted">Current viewers: @_job.CurrentProgressSiteViews, Total: @_job.TotalProgressSiteViews</small></p>
    }

    @if (_job.LastSystemInfo is { } info)
    {
        var cpuUsageCaption = $"CPU usage: {info.CpuUsagePercentage}% ({info.CpuUsage:N1} / {info.CpuCoresAvailable:N1} cores)";
        var memoryUsageCaption = $"Memory usage: {info.MemoryUsagePercentage}% ({info.MemoryUsageGB:N1} / {info.MemoryAvailableGB:N1} GB)";
        var cpuUsageWidth = $"{info.CpuUsagePercentage}%";
        var memoryUsageWidth = $"{info.MemoryUsagePercentage}%";

        <div>@cpuUsageCaption</div>
        <div class="progress" style="width: 25%">
            <div class="progress-bar" role="progressbar" style="width: @cpuUsageWidth"></div>
        </div>

        <div>@memoryUsageCaption</div>
        <div class="progress" style="width: 25%">
            <div class="progress-bar" role="progressbar" style="width: @memoryUsageWidth"></div>
        </div>
    }

    @if (_job.CustomArguments is { Length: > 0 } customArguments)
    {
        <p><small class="text-muted">Arguments: @customArguments</small></p>
    }

    <br />
    <pre>
        <code>
            @foreach (string line in _lines)
            {
                @line
                <br />
            }
        </code>
    </pre>
}
else if (_completedJob is not null)
{
    <h1><a href="@_completedJob.TestedPROrBranchLink">@_completedJob.Title</a></h1>
    <div>Started at @_completedJob.StartedAt.ToISODateTime(' ') UTC, ran for @_completedJob.Duration.ToElapsedTime().</div>
    @if (_completedJob.TrackingIssueUrl is not null)
    {
        <div>Tracking issue: <a href="@_completedJob.TrackingIssueUrl">@_completedJob.TrackingIssueUrl</a></div>
    }
    @if (_completedJob.LogsArtifactUrl is { } logsUrl)
    {
        <div>You can download the logs <a href="@logsUrl">here</a>@(_completedJob.Duration.TotalDays > 7 ? " (file may no longer exist)" : "").</div>
    }
    <br />
    @if (_completedJob.CustomArguments is { Length: > 0 } customArguments)
    {
        <p><small class="text-muted">Arguments: @customArguments</small></p>
    }
    <br />
    @if (_completedJob.Artifacts.Length != 0)
    {
        <ul class="list-group">
            <li class="list-group-item active">Artifacts@(_completedJob.Duration.TotalDays > 7 ? " (files may no longer exist)" : ""):</li>
            @foreach (var (FileName, Url, Size) in _completedJob.Artifacts)
            {
                <li class="list-group-item">
                    <a href="@Url">@FileName</a> (@JobBase.GetRoughSizeString(Size))
                </li>
            }
        </ul>
    }
}
else
{
    <div>Can't find a job with that id :/</div>
}

@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    private string _githubUserLogin;
    private bool _canCancelJob;
    private bool _canViewCredentials;

    private const int NumberOfLogLines = 28;

    private readonly CancellationTokenSource _cts = new();
    private readonly ConcurrentQueue<string> _lines = new();

    [Parameter]
    public string JobId { get; set; }

    private JobBase _job;
    private CompletedJobRecord _completedJob;

    protected override async Task OnInitializedAsync()
    {
        _completedJob = await runtimeUtils.TryGetCompletedJobRecordAsync(JobId, _cts.Token);

        if (runtimeUtils.TryGetJob(JobId, publicId: true, out _job))
        {
            Interlocked.Increment(ref _job.TotalProgressSiteViews);
            Interlocked.Increment(ref _job.CurrentProgressSiteViews);

            _ = Task.Run(async () =>
            {
                try
                {
                    using var timer = new PeriodicTimer(TimeSpan.FromSeconds(0.1));
                    SystemHardwareInfo previousSystemInfo = null;

                    while (_completedJob is null && await timer.WaitForNextTickAsync(_cts.Token))
                    {
                        SystemHardwareInfo current = _job.LastSystemInfo;

                        if (!ReferenceEquals(previousSystemInfo, current))
                        {
                            previousSystemInfo = current;

                            _ = InvokeAsync(StateHasChanged);
                        }
                    }
                }
                catch { }
            });

            _ = Task.Run(async () =>
            {
                try
                {
                    await foreach (string line in _job.StreamLogsAsync(_cts.Token))
                    {
                        if (line is null)
                        {
                            if (_job.Completed)
                            {
                                _completedJob = await runtimeUtils.TryGetCompletedJobRecordAsync(JobId, _cts.Token);
                            }

                            _ = InvokeAsync(StateHasChanged);

                            if (_completedJob is not null)
                            {
                                break;
                            }
                        }
                        else
                        {
                            if (_lines.Count == NumberOfLogLines)
                            {
                                _lines.TryDequeue(out _);
                            }

                            string normalized = line.TruncateWithDotDotDot(190);

                            _lines.Enqueue(normalized);
                        }
                    }

                    _ = InvokeAsync(StateHasChanged);
                }
                catch { }
            });

            if (authenticationState is not null &&
                (await authenticationState).User.TryGetGitHubLogin(out _githubUserLogin))
            {
                _canCancelJob =
                    _githubUserLogin == _job.GithubCommenterLogin ||
                    _githubUserLogin == "MihaZupan";

                _canViewCredentials = _githubUserLogin == "MihaZupan";
            }
        }
    }

    public void Dispose()
    {
        if (_job is not null)
        {
            Interlocked.Decrement(ref _job.CurrentProgressSiteViews);
        }

        _cts.Cancel();
    }
}
