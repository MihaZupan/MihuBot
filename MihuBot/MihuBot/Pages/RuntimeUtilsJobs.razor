@page "/runtime-utils/{jobId}"
@using MihuBot.RuntimeUtils;
@using System.Collections.Concurrent;
@inject RuntimeUtilsService runtimeUtils
@implements IDisposable

@if (_completedJob is not null)
{
    <h1><a href="@_completedJob.TestedPROrBranchLink">@_completedJob.JobTitle</a></h1>
    <div>Started at @_completedJob.StartedAt.ToISODateTime(' ') UTC, ran for @RuntimeUtilsJob.GetElapsedTime(_completedJob.Duration).</div>
    <div>Tracking issue: <a href="@_completedJob.TrackingIssueUrl">@_completedJob.TrackingIssueUrl</a></div>
    <div>You can download the logs <a href="@_completedJob.LogsArtifactUrl">here</a>@(_completedJob.Duration.TotalDays > 7 ? " (file may no longer exist)" : "").</div>
    <br />
    @if (_completedJob.CustomArguments is { Length: > 0 } customArguments)
    {
        <p><small class="text-muted">Arguments: @customArguments</small></p>
    }

}
else if (_job is not null)
{
    <h1><a href="@_job.TestedPROrBranchLink">@_job.JobTitle</a></h1>
    <div>For all the logs, see <a href="@_job.ProgressUrl">@_job.ProgressUrl</a></div>
    <br />
    @if (_job.TrackingIssue is not null)
    {
        <div>Tracking issue: <a href="@_job.TrackingIssue.HtmlUrl">@_job.TrackingIssue.HtmlUrl</a></div>
        <br />
    }
    <div>The build is still in progress (@_job.GetElapsedTime()) ...</div>
    <br />
    <pre>
        <code>
            @foreach (string line in _lines)
            {
                @line
                <br />
            }
        </code>
    </pre>
}
else
{
    <div>Can't find a job with that id :/</div>
}

@code
{
    private const int NumberOfLogLines = 30;

    private readonly CancellationTokenSource _cts = new();
    private readonly ConcurrentQueue<string> _lines = new();

    [Parameter]
    public string JobId { get; set; }

    private RuntimeUtilsJob _job;
    private CompletedJobRecord _completedJob;

    protected override async Task OnInitializedAsync()
    {
        _completedJob = await runtimeUtils.TryGetCompletedJobRecordAsync(JobId, _cts.Token);

        if (_completedJob is null &&
            runtimeUtils.TryGetJob(JobId, publicId: true, out _job))
        {
            _ = Task.Run(async () =>
            {
                try
                {
                    await foreach (string line in _job.StreamLogsAsync(_cts.Token))
                    {
                        if (line is null)
                        {
                            if (_job.Completed)
                            {
                                _completedJob = await runtimeUtils.TryGetCompletedJobRecordAsync(JobId, _cts.Token);
                            }

                            _ = InvokeAsync(StateHasChanged);

                            if (_completedJob is not null)
                            {
                                break;
                            }
                        }
                        else
                        {
                            if (_lines.Count == NumberOfLogLines)
                            {
                                _lines.TryDequeue(out _);
                            }

                            string normalized = line.TruncateWithDotDotDot(190);

                            _lines.Enqueue(normalized);
                        }
                    }

                    _ = InvokeAsync(StateHasChanged);
                }
                catch { }
            });
        }
    }

    public void Dispose() => _cts.Cancel();
}
