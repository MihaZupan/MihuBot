@page "/runtime-utils/{jobId}"
@using MihuBot.RuntimeUtils;
@using System.Collections.Concurrent;
@inject RuntimeUtilsService runtimeUtils
@implements IDisposable

@if (_job is null)
{
    <div>Can't find a job with that id :/</div>
}
else
{
    <h1><a href="@_job.PullRequest.HtmlUrl">@_job.PullRequest.Title</a> by @_job.PullRequest.User?.Login [@_job.Architecture]</h1>
    <div>For all the logs, see <a href="@_job.ProgressUrl">@_job.ProgressUrl</a></div>
    <br />
    @if (_job.TrackingIssue is not null)
    {
        <div>Tracking issue: <a href="@_job.TrackingIssue.HtmlUrl">@_job.TrackingIssue.HtmlUrl</a></div>
        <br />
    }
    @if (_job.Completed)
    {
        <div>The build has completed (took @_job.GetElapsedTime()).</div>
    }
    else
    {
        <div>The build is still in progress (@_job.GetElapsedTime()) ...</div>
    }
    <br />
    <pre><code>
        @foreach (string line in _lines)
        {
            @line
            <br />
        }
    </code></pre>
}

@code
{
    private const int NumLines = 30;

    private readonly CancellationTokenSource _cts = new();
    private readonly ConcurrentQueue<string> _lines = new();

    [Parameter]
    public string JobId { get; set; }

    private RuntimeUtilsJob _job;

    protected override void OnInitialized()
    {
        if (runtimeUtils.TryGetJob(JobId, publicId: true, out _job))
        {
            Task.Run(async () =>
            {
                try
                {
                    await foreach (string line in _job.StreamLogsAsync(_cts.Token))
                    {
                        if (line is null)
                        {
                            _ = InvokeAsync(StateHasChanged);
                        }
                        else
                        {
                            if (_lines.Count == NumLines)
                            {
                                _lines.TryDequeue(out _);
                            }

                            string normalized = line.TruncateWithDotDotDot(190);

                            _lines.Enqueue(normalized);
                        }
                    }

                    _ = InvokeAsync(StateHasChanged);
                }
                catch { }
            });
        }
    }

    public void Dispose()
    {
        _cts.Cancel();
    }
}
