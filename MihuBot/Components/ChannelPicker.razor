@attribute [Authorize(Policy = "Discord")]
@inject DiscordSocketClient discord
@inject IJSRuntime jsRuntime

<div class="dropdown form-group">
    <button class="form-control btn btn-primary dropdown-toggle" type="button" id="guildsDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        @(selectedGuild?.Name ?? "Select guild")
    </button>
    <div class="dropdown-menu" aria-labelledby="guildsDropdown">
        @foreach (var guild in guilds.OrderBy(g => g.Name))
        {
            <button @onclick="() => { selectedGuild = guild; SetChannel(null); }"
                    class="dropdown-item" type="button">
                @guild.Name
            </button>
        }
    </div>
</div>

@if (selectedGuild != null)
{
    <div class="dropdown form-group">
        <button class="form-control btn btn-primary dropdown-toggle" type="button" id="channelsDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            @(selectedChannel?.Name ?? "Select channel")
        </button>
        <div class="dropdown-menu" aria-labelledby="channelsDropdown">
            @foreach (var channel in selectedGuild.TextChannels
                    .Where(c => ChannelFilter(c, selectedGuild.GetUser(userId)))
                    .OrderBy(c => c.Position))
            {
                <button @onclick="() => SetChannel(channel)"
                        class="dropdown-item" type="button">
                    @channel.Name
                </button>
            }
        </div>
    </div>
}

@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Parameter]
    public Action<SocketTextChannel> OnChannelSelected { get; set; }

    [Parameter]
    public Action OnChannelCleared { get; set; }

    [Parameter]
    public Func<SocketGuild, SocketGuildUser, bool> GuildFilter { get; set; } = delegate { return true; };

    [Parameter]
    public Func<SocketTextChannel, SocketGuildUser, bool> ChannelFilter { get; set; } = delegate { return true; };


    ulong userId;
    SocketGuild[] guilds;
    SocketGuild selectedGuild;
    SocketTextChannel selectedChannel;

    protected override async Task OnInitializedAsync()
    {
        userId = (await authenticationState).User.GetDiscordUserId();

        guilds = (discord.GetUser(userId)?.MutualGuilds ?? Array.Empty<SocketGuild>())
            .Where(g => GuildFilter(g, g.GetUser(userId)))
            .ToArray();

        if (guilds.Length == 1)
            selectedGuild = guilds.Single();
    }

    private void SetChannel(SocketTextChannel channel)
    {
        if (selectedChannel != channel)
        {
            selectedChannel = channel;
            if (channel is null)
            {
                OnChannelCleared();
            }
            else
            {
                OnChannelSelected(channel);
            }
        }
    }
}
