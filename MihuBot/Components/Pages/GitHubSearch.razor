@page "/search"
@using MihuBot.DB.GitHub
@using MihuBot.RuntimeUtils
@using Octokit
@using IssueSearchResult = MihuBot.RuntimeUtils.GitHubSearchService.IssueSearchResult
@rendermode InteractiveServer
@inject GitHubDataService GitHubData
@inject GitHubSearchService Search
@implements IDisposable

<PageTitle>GitHub Search</PageTitle>

<style>
    .search-toolbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
    }

    .toolbar-center {
        display: flex;
        justify-content: center;
        flex-grow: 2;
    }

    .loading-progress-container {
        width: 100%;
        height: 8px;
    }

    .loading-progress-bar {
        height: 8px;
        background: #04AA6D;
    }

    #searchQuery {
        width: clamp(35vw, 200px, 500px);
        font-size: 22px;
    }

    .statistics-container {
        margin-left: auto;
    }

    .issue-icon {
        display: inline-block;
        width: 16px;
        height: 16px;
        margin-bottom: -2px;
    }
</style>

<div>
    <div class="search-toolbar">
        <div class="toolbar-center">
            <div class="form-group">
                <div class="input-group">
                    <input id="searchQuery" type="text" @bind-value="SearchQuery" @bind-value:event="oninput" placeholder="Search query">
                    <div class="btn-group" role="group">
                        <button type="button" @onclick="() => DisableRelevanceClassification = !DisableRelevanceClassification" class="btn btn-primary ml-1">@(DisableRelevanceClassification ? "Filter unrelated results" : "I want faster searches")</button>
                        <button type="button" @onclick="() => IncludeOpenIssueOnly = !IncludeOpenIssueOnly" class="btn btn-primary ml-1">@(IncludeOpenIssueOnly ? "Show all" : "Hide closed issues")</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="statistics-container">
            <p>@(GitHubData.IssueCount / 1_000)k issues, @(GitHubData.CommentCount / 1_000)k comments, @(GitHubData.SearchVectorCount / 1_000)k vectors</p>
        </div>
    </div>

    <div class="loading-progress-container">
        <div class="loading-progress-bar" id="loadingProgressBar" style="width: @(_isLoading ? "100" : "0")%"></div>
    </div>

    @if (_errorMessage is not null)
    {
        <div class="alert alert-danger">
            @_errorMessage
        </div>
    }

    @if (_searchResults.Length == 0)
    {
        <div class="alert alert-info">
            @(_isLoading ? "Searching ..." : "No results found.")
        </div>
    }
    else
    {
        <div class="list-group">
            @foreach (var result in _searchResults)
            {
                <a href="@result.Issue.HtmlUrl" class="list-group-item list-group-item-action">
                    <div>
                        <span class="issue-icon @PickCssIconClass(result.Issue)" aria-hidden="true"></span>
                        <span class="mb-1">@result.Issue.Title.TruncateWithDotDotDot(300)</span>
                    </div>
                    <div>
                        <span class="mr-1">@result.Score.ToString("F2")</span>
                        <span class="ml-1 mr-1">@result.Issue.CreatedAt.ToISODate()</span>
                        <span class="ml-1 mr-1">#@result.Issue.Number by @result.Issue.User.Login</span>
                        @foreach (var label in result.Issue.Labels)
                        {
                            <span class="badge badge-pill ml-1" style="background-color: #@label.Color; color: @PickCssTextColor(label.Color)">@label.Name</span>
                        }
                    </div>
                </a>
            }
        </div>
    }
</div>

@code
{
    static string PickCssTextColor(string backgroundColor)
    {
        // https://stackoverflow.com/a/36888120/6845657
        var color = Color.Parse(backgroundColor);
        double luma = ((0.299 * color.R) + (0.587 * color.G) + (0.114 * color.B)) / 255;
        return luma > 0.5 ? "black" : "white";
    }

    static string PickCssIconClass(IssueInfo issue)
    {
        if (issue.PullRequest is { } pr)
        {
            return issue.State == ItemState.Open
                ? pr.Draft ? "icon-pr-opened-draft" : "icon-pr-opened"
                : pr.MergedAt.HasValue ? "icon-pr-merged" : "icon-pr-closed";
        }

        return issue.State == ItemState.Open
            ? "icon-issue-opened"
            : "icon-issue-closed";
    }

    private (IssueInfo Issue, double Score)[] _searchResults = [];
    private string _errorMessage;
    private Debouncer<(string Query, bool DisableRelevanceClassification, bool IncludeOpenIssueOnly)> _debouncer;
    private bool _isLoading;

    private bool IncludeOpenIssueOnly
    {
        get => field;
        set
        {
            field = value;
            RefreshSearchResults();
        }
    }

    private bool DisableRelevanceClassification
    {
        get => field;
        set
        {
            field = value;
            RefreshSearchResults();
        }
    }

    private string SearchQuery
    {
        get => field ?? string.Empty;
        set
        {
            field = value;
            RefreshSearchResults();
        }
    }

    private void RefreshSearchResults()
    {
        _debouncer.Update((SearchQuery.Trim(), DisableRelevanceClassification, IncludeOpenIssueOnly));
    }

    protected override void OnInitialized()
    {
        _debouncer = new Debouncer<(string, bool, bool)>(TimeSpan.FromMilliseconds(25), SearchAsync);
        _debouncer.CancelPendingActions = true;
    }

    private async Task SearchAsync((string SearchQuery, bool DisableRelevanceClassification, bool IncludeOpenIssueOnly) state, CancellationToken cancellationToken)
    {
        (string searchQuery, bool disableRelevanceClassification, bool includeOpenIssueOnly) = state;

        try
        {
            if (searchQuery.Length > 1_000)
            {
                _errorMessage = "Stop it";
            }
            else
            {
                if (string.IsNullOrWhiteSpace(searchQuery))
                {
                    _searchResults = [];
                }
                else
                {
                    _isLoading = true;

                    var filters = new GitHubSearchService.IssueSearchFilters(IncludeOpen: true, IncludeClosed: !includeOpenIssueOnly, IncludeIssues: true, IncludePullRequests: true);
                    var searchTask = Search.SearchIssuesAndCommentsAsync(searchQuery, maxResults: 100, filters, cancellationToken);
                    await InvokeAsync(StateHasChanged);

                    (IssueSearchResult[] Results, double Score)[] resultsByIssue = GitHubSearchService.GroupResultsByIssue(await searchTask);

                    if (!disableRelevanceClassification)
                    {
                        resultsByIssue = await Search.FilterOutUnrelatedResults(searchQuery, extraSearchContext: "", preferSpeed: true, resultsByIssue, cancellationToken);
                    }

                    _searchResults = resultsByIssue
                        .Select(r => (r.Results[0].Issue, r.Score))
                        .ToArray();
                }

                _errorMessage = null;
                _isLoading = false;
            }
        }
        catch (Exception ex)
        {
            if (cancellationToken.IsCancellationRequested)
            {
                return;
            }

            _errorMessage = ex.Message;
        }

        try
        {
            await InvokeAsync(StateHasChanged);
        }
        catch { }
    }

    public void Dispose() => _debouncer?.Dispose();
}
