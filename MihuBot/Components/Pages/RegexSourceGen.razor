@page "/regex"
@using System.Threading
@using Microsoft.AspNetCore.WebUtilities
@using MihuBot.RuntimeUtils
@using System.Text.RegularExpressions
@using System.Web
@inject RegexSourceGenerator SourceGenerator
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer
@implements IDisposable

<PageTitle>Regex Source Generator</PageTitle>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/default.min.css">
<link rel="stylesheet" href="vs2015.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/csharp.min.js"></script>

<style>
    .regex-toolbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
    }

    .toolbar-center {
        display: flex;
        justify-content: center;
        flex-grow: 2;
    }

    .scroll-progress-container {
        width: 100%;
        height: 8px;
        background: #ccc;
    }

    .scroll-progress-bar {
        height: 8px;
        background: #04AA6D;
        width: 0%;
    }

    #regexPattern {
        width: clamp(35vw, 200px, 500px);
        font-size: 22px;
    }

    .commit-container {
        margin-left: auto;
    }
</style>

<script>
    function replaceHistory(url) {
        history.replaceState(null, '', url);
    }

    function registerScrollCallback() {
        var codeblock = document.getElementById('codeblock');
        codeblock.onscroll = onCodeBlockScroll;
        setInterval(onCodeBlockScroll, 100);
    }

    function onCodeBlockScroll() {
      var codeblock = document.getElementById('codeblock');
      var winScroll = codeblock.scrollTop;
      var height = codeblock.scrollHeight - codeblock.clientHeight;
      var scrolled = (winScroll / height) * 100;
      document.getElementById("scrollProgressBar").style.width = scrolled + "%";
    }
</script>

<div>
    <div class="regex-toolbar">
        <div class="toolbar-center">
            <div class="form-group">
                <div class="input-group">
                    <input id="regexPattern" type="text" @bind-value="Pattern" @bind-value:event="oninput" placeholder="Regex pattern">
                    <div class="btn-group" role="group">
                        <button type="button" @onclick="() => ToggleShowOnlyCoreMethods()" class="btn btn-primary ml-1">@(_showOnlyCoreMethods ? "Show all" : "Show core methods")</button>
                        <button type="button" @onclick="() => ToggleHideComments()" class="btn btn-primary ml-1">@(_hideComments ? "Show comments" : "Hide comments")</button>
                    </div>
                    <div class="input-group-append ml-1">
                        <button class="btn btn-outline-info dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Regex Options</button>
                        <div class="dropdown-menu">
                            @foreach (RegexOptions option in RegexSourceGenerator.ValidOptions)
                            {
                                <a class="dropdown-item" @onclick="() => ToggleRegexOption(option)" style="@(Options.HasFlag(option) ? "color: crimson" : "")">@(Options.HasFlag(option) ? "Remove" : "Add") @option.ToString()</a>
                            }
                        </div>
                    </div>
                    <div class="input-group-append ml-1">
                        <button class="btn btn-outline-info dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">@Generator.Name</button>
                        <div class="dropdown-menu">
                            @foreach (var generator in SourceGenerator.Generators)
                            {
                                <a class="dropdown-item" @onclick="() => Generator = generator">@generator.Name</a>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @if (Generator.Commit is not null)
        {
            <div class="commit-container">
                <p>Generator commit: <a href="https://github.com/@Generator.Repo/commit/@Generator.Commit">@Generator.Commit.Substring(0, 6)</a></p>
            </div>
        }
    </div>

    <div class="scroll-progress-container">
        <div class="scroll-progress-bar" id="scrollProgressBar"></div>
    </div>

    @if (_errorMessage is not null)
    {
        <div class="alert alert-danger">
            @_errorMessage
        </div>
    }

    <CodeHighlight CodeBlockId="codeblock" CodeStyle="max-height: calc(95vh - 60px)" Language="language-csharp" Code="@_generatedSource" />
</div>

@code
{

    private bool _showOnlyCoreMethods = true;
    private bool _hideComments;

    private string _rawGeneratedSource;
    private string _generatedSource;
    private string _errorMessage;
    private Debouncer<(RegexSourceGenerator.Generator Generator, string Pattern, RegexOptions Options)> _debouncer;

    private async Task ToggleShowOnlyCoreMethods()
    {
        _showOnlyCoreMethods.Toggle();
        await PostProcessSourceAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task ToggleHideComments()
    {
        _hideComments.Toggle();
        await PostProcessSourceAsync();
        await InvokeAsync(StateHasChanged);
    }

    private string Pattern
    {
        get => field;
        set
        {
            field = value;
            RegenerateSource();
        }
    }

    private RegexOptions Options
    {
        get => field;
        set
        {
            field = value;
            RegenerateSource();
        }
    }

    private RegexSourceGenerator.Generator Generator
    {
        get => field ?? SourceGenerator.Latest;
        set
        {
            field = value;
            RegenerateSource();
        }
    }

    private void ToggleRegexOption(RegexOptions option)
    {
        if (Options.HasFlag(option))
        {
            Options &= ~option;
        }
        else
        {
            Options |= option;
        }
    }

    private void RegenerateSource()
    {
        _debouncer.Update((Generator, Pattern, Options));
    }

    protected override void OnInitialized()
    {
        _debouncer = new Debouncer<(RegexSourceGenerator.Generator, string, RegexOptions)>(TimeSpan.FromMilliseconds(5), FetchGeneratedSource);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("registerScrollCallback");

            if (Uri.TryCreate(Navigation.Uri, UriKind.Absolute, out Uri uri))
            {
                var query = QueryHelpers.ParseQuery(uri.Query);

                if (query.TryGetValue("pattern", out var pattern))
                {
                    Pattern = pattern;
                }

                if (query.TryGetValue("options", out var optionsStr) && int.TryParse(optionsStr, out int options) && options > 0)
                {
                    RegexOptions validated = RegexOptions.None;
                    foreach (var option in RegexSourceGenerator.ValidOptions)
                    {
                        if (((RegexOptions)options).HasFlag(option))
                        {
                            validated |= option;
                        }
                    }

                    Options = validated;
                }

                if (query.TryGetValue("showAll", out var showAllStr) && showAllStr == "1")
                {
                    _showOnlyCoreMethods = false;
                }

                if (query.TryGetValue("hideComments", out var hideCommentsStr) && hideCommentsStr == "1")
                {
                    _hideComments = true;
                }

                if (query.TryGetValue("version", out var version) && SourceGenerator.Generators.FirstOrDefault(g => g.Name == version) is { } generator)
                {
                    Generator = generator;
                }
            }
        }
    }

    private async Task FetchGeneratedSource((RegexSourceGenerator.Generator Generator, string Pattern, RegexOptions Options) input, CancellationToken cancellationToken)
    {
        (RegexSourceGenerator.Generator generator, string pattern, RegexOptions options) = input;

        try
        {
            if (pattern.Length > 10_000)
            {
                _errorMessage = "Stop it";
            }
            else if (SourceGenerator.LoadError is { } loadError)
            {
                _errorMessage = loadError;
            }
            else
            {
                string source = await SourceGenerator.GenerateSourceAsync(generator, pattern, options, cancellationToken);
                source = HttpUtility.HtmlEncode(source);

                _rawGeneratedSource = source;
                _errorMessage = null;

                await PostProcessSourceAsync();
            }
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task PostProcessSourceAsync()
    {
        string source = _rawGeneratedSource;

        if (_hideComments)
        {
            var sb = new StringBuilder(source.Length);

            foreach (var line in source.EnumerateLines())
            {
                int notSpace = line.IndexOfAnyExcept(' ');
                if (notSpace >= 0)
                {
                    if (line[notSpace] is '/' or '#')
                        continue;
                }

                sb.Append(line);
                sb.AppendLine();
            }

            source = sb.ToString();
        }

        if (_showOnlyCoreMethods)
        {
            source =
                $"""
                {GetCodeBlock(source, "private bool TryFindNextPossibleStartingPosition")}
                {GetCodeBlock(source, "private bool TryMatchAtCurrentPosition")}
                {GetCodeBlock(source, "file static class Utilities")}
                """;
        }

        _generatedSource = source.Trim(' ', '\t', '\r', '\n');

        var newUrl = Navigation.GetUriWithQueryParameters(new Dictionary<string, object>
        {
            { "pattern", Pattern },
            { "showAll", _showOnlyCoreMethods ? null : "1" },
            { "hideComments", _hideComments ? "1" : null },
            { "options", Options == RegexOptions.None ? null : (int)Options },
            { "version", Generator.Name == SourceGenerator.Latest.Name ? null : Generator.Name },
        });

        if (newUrl.Length <= 10_000)
        {
            await JSRuntime.InvokeVoidAsync("replaceHistory", newUrl);
        }
    }

    private static string GetCodeBlock(string source, string prefix)
    {
        StringBuilder sb = new();
        int prefixLength = -1;

        foreach (var line in source.EnumerateLines())
        {
            if (prefixLength < 0)
            {
                prefixLength = line.IndexOf(prefix, StringComparison.Ordinal);
            }

            if (prefixLength >= 0)
            {
                var trimmed = line.Length >= prefixLength
                    ? line.Slice(prefixLength)
                    : line;

                sb.Append(trimmed);
                sb.AppendLine();

                if (line.IndexOf('}') == prefixLength)
                {
                    break;
                }
            }
        }

        return sb.ToString();
    }

    public void Dispose() => _debouncer?.Dispose();
}
