@page "/triage"
@using MihuBot.DB.GitHub
@using MihuBot.RuntimeUtils
@using Octokit
@using System.Collections.Concurrent
@rendermode InteractiveServer
@inject IssueTriageHelper TriageHelper
@inject GitHubClient GitHubClient
@inject RuntimeUtilsService RuntimeUtils
@inject GitHubDataService GitHubDataService
@inject Logger Logger
@implements IDisposable

<PageTitle>GitHub Triage</PageTitle>

<style>
    .search-toolbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
    }

    .toolbar-center {
        display: flex;
        justify-content: center;
        flex-grow: 2;
    }

    .loading-progress-container {
        width: 100%;
        height: 8px;
    }

    .loading-progress-bar {
        height: 8px;
        background: #04AA6D;
    }

    #triageIssueUrl {
        width: clamp(35vw, 200px, 500px);
        font-size: 22px;
    }
</style>

<AuthorizeView Policy="GitHub">
    <Authorized>
        <div>
            <div class="search-toolbar">
                <div class="toolbar-center">
                    <div class="form-group">
                        <div class="input-group">
                            <input id="triageIssueUrl" type="text" @bind-value="TriageIssueUrl" @bind-value:event="oninput" placeholder="Issue/PR (number or link)">
                            <div class="input-group-append ml-1">
                                <button class="btn btn-outline-info dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">@Model.Name</button>
                                <div class="dropdown-menu">
                                    @foreach (var model in TriageHelper.AvailableModels)
                                    {
                                        <a class="dropdown-item" @onclick="() => Model = model">@model.Name</a>
                                    }
                                </div>
                            </div>
                            <div class="btn-group" role="group">
                                <button type="button" @onclick="() => UseCommentsOnCurrentIssue = !UseCommentsOnCurrentIssue" class="btn btn-primary ml-1">@(UseCommentsOnCurrentIssue ? "Ignore comments on triaged issue" : "Include comments on triaged issue")</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="loading-progress-container">
                <div class="loading-progress-bar" id="loadingProgressBar" style="width: @(_loading ? "100" : "0")%"></div>
            </div>

            @if (_errorMessage is not null)
            {
                <div class="alert alert-danger">
                    @_errorMessage
                </div>
            }

            <pre style="max-width: 95%; max-height: 95vh; overflow: hidden; display: flex;">
                <code style="word-wrap: break-word; font-size: small">
                    @foreach (string line in _toolLogs)
                    {
                        @line
                    }
                </code>
            </pre>

            @((MarkupString)_htmlResponse)
        </div>
    </Authorized>
    <NotAuthorized>
        <a href="Account/Login/GitHub?returnUrl=triage">
            <img src="github-mark.svg" />
            <strong style="font-size: 24px">Login with GitHub</strong>
        </a>
    </NotAuthorized>
</AuthorizeView>

@code
{
    private string _errorMessage;
    private readonly ConcurrentQueue<string> _toolLogs = new();
    private string _htmlResponse;
    private bool _loading;

    [CascadingParameter]
    private Task<AuthenticationState> _authenticationState { get; set; }
    private string _githubUserLogin;

    private string TriageIssueUrl
    {
        get => field;
        set
        {
            field = value;
            UpdateTriageOperation();
        }
    }

    private IssueTriageHelper.ModelInfo Model
    {
        get => field ??= TriageHelper.DefaultModel;
        set
        {
            field = value;
            UpdateTriageOperation();
        }
    }

    private bool UseCommentsOnCurrentIssue
    {
        get => field;
        set
        {
            field = value;
            UpdateTriageOperation();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _debouncer = new Debouncer<(string, IssueTriageHelper.ModelInfo, bool)>(TimeSpan.FromMilliseconds(100), DoTriageAsync);
        _debouncer.CancelPendingActions = true;

        if (_authenticationState is not null)
        {
            (await _authenticationState).User.TryGetGitHubLogin(out _githubUserLogin);
        }
    }

    private Debouncer<(string TriageIssueUrl, IssueTriageHelper.ModelInfo Model, bool UseCommentsOnCurrentIssue)> _debouncer;

    private void UpdateTriageOperation()
    {
        _debouncer.Update((TriageIssueUrl.Trim(), Model, UseCommentsOnCurrentIssue));
    }

    private void LogToolLine(string message)
    {
        _toolLogs.Enqueue($"{message}\n");
        _ = InvokeAsync(StateHasChanged);
    }

    private async Task DoTriageAsync((string TriageIssueUrl, IssueTriageHelper.ModelInfo Model, bool UseCommentsOnCurrentIssue) state, CancellationToken cancellationToken)
    {
        (string triageIssueUrl, IssueTriageHelper.ModelInfo model, bool UseCommentsOnCurrentIssue) = state;

        try
        {
            _loading = true;
            _errorMessage = null;
            _htmlResponse = null;
            _toolLogs.Clear();

            if (string.IsNullOrEmpty(triageIssueUrl))
            {
                return;
            }

            if (!GitHubHelper.TryParseIssueOrPRNumber(triageIssueUrl, out string repoName, out int issueNumber))
            {
                _errorMessage = "Invalid issue/PR URL. Use the number or the full link.";
                return;
            }

            LogToolLine($"Starting triage for issue #{issueNumber} with model {model.Name} ...");

            if (GitHubDataService.WatchedRepos.FirstOrDefault(r => r.Equals(repoName, StringComparison.OrdinalIgnoreCase)) is { } normalizedRepoName)
            {
                repoName = normalizedRepoName;
            }

            IssueInfo issue = await TriageHelper.GetIssueAsync(repoName ?? "dotnet/runtime", issueNumber, cancellationToken);

            if (issue is null)
            {
                Logger.DebugLog($"Triage: Issue #{issueNumber} not found in the database. Fetching from GitHub ...");

                if (repoName is not null && !GitHubDataService.WatchedRepos.Any(r => r.Equals(repoName, StringComparison.OrdinalIgnoreCase)))
                {
                    _errorMessage = $"Repository '{repoName}' is not being tracked by MihuBot.";
                    return;
                }

                repoName ??= "dotnet/runtime";
                string repoOwner = repoName.Split('/')[0];
                string repoNameOnly = repoName.Split('/')[1];

                Issue newIssue;
                try
                {
                    newIssue = await GitHubClient.Issue.Get(repoOwner, repoNameOnly, issueNumber).WaitAsyncAndSupressNotObserved(cancellationToken);
                }
                catch (NotFoundException)
                {
                    _errorMessage = $"Issue #{issueNumber} not found.";
                    return;
                }

                issue = new IssueInfo();
                issue.RepositoryId = (await GitHubClient.Repository.Get(repoOwner, repoNameOnly).WaitAsyncAndSupressNotObserved(cancellationToken)).Id;
                issue.Repository = await GitHubDataService.TryGetRepositoryInfoAsync(repoName);
                GitHubDataService.PopulateBasicIssueInfo(issue, newIssue);
                issue.User = new UserInfo
                {
                    Id = newIssue.User.Id,
                    Login = newIssue.User.Login,
                };
                issue.Comments = [];
            }

            Task stateChangedTask = Task.CompletedTask;

            await foreach (string html in TriageHelper.TriageIssueAsync(model, _githubUserLogin, issue, LogToolLine, skipCommentsOnCurrentIssue: !UseCommentsOnCurrentIssue, cancellationToken))
            {
                _htmlResponse = html;

                if (stateChangedTask.IsCompleted)
                {
                    stateChangedTask = InvokeAsync(StateHasChanged);
                }
            }

            await stateChangedTask;
        }
        catch (OperationCanceledException) when (cancellationToken.IsCancellationRequested)
        {

        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            if (!cancellationToken.IsCancellationRequested)
            {
                _loading = false;

                try
                {
                    await InvokeAsync(StateHasChanged);
                }
                catch { }
            }
        }
    }

    public void Dispose() => _debouncer?.Dispose();
}
