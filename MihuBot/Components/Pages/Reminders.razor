@page "/reminders"
@attribute [Authorize(Policy = "Discord")]
@using MihuBot.Reminders
@inject DiscordSocketClient discord
@inject ReminderService reminderService
@inject Logger logger
@implements IAsyncDisposable
@rendermode InteractiveServer

<h1>Reminders</h1>

<table class="table">
    <thead class="thead-light">
        <tr>
            <th scope="col">Time (UTC)</th>
            <th scope="col">Remaining</th>
            <th scope="col">User</th>
            <th scope="col">Channel</th>
            <th scope="col">Message</th>
            <th scope="col">Cancel</th>
        </tr>
    </thead>
    @foreach (var entry in reminders
    .Where(r => r.Time > now)
    .OrderBy(r => r.Time))
{
    <tr>
            <td scope="row">@entry.Time.ToISODateTime(' ')</td>
            <td>@((entry.Time - now).ToElapsedTime()) @(entry.RepeatYearly ? "(yearly)" : "")</td>
            <td>@(discord.GetUser((ulong)entry.AuthorId)?.GetName() ?? "Jane Doe")</td>
            <td>@(discord.GetTextChannel(entry.ChannelId)?.Name ?? "N/A")</td>
            <td>@entry.Message</td>
            <td><button class="btn btn-danger" onclick="@(() => ScheduleReminderRemoval(entry))">Cancel</button></td>
        </tr>
}
</table>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    DateTime now = DateTime.UtcNow;
    DateTime lastUpdateTime = DateTime.UtcNow;
    IEnumerable<ReminderEntry> reminders = Array.Empty<ReminderEntry>();
    Timer timer;
    ulong userId;

    private void ScheduleReminderRemoval(ReminderEntry entry)
    {
        _ = Task.Run(async () =>
        {
            try
            {
                logger.DebugLog($"{userId} is deleting a reminder for {entry.AuthorId} ({entry.Time.ToISODateTime()})");

                await reminderService.RemoveReminderAsync(entry);
                await UpdateRemindersAsync();
                await InvokeAsync(StateHasChanged);
            }
            catch { }
        });
    }

    protected override async Task OnInitializedAsync()
    {
        userId = (await authenticationState).User.GetDiscordUserId();

        await UpdateRemindersAsync();

        timer = new Timer(_ =>
        {
            now = DateTime.UtcNow;

            bool isAdmin = Constants.Admins.Contains(userId);
            if (now - lastUpdateTime > (isAdmin ? TimeSpan.FromSeconds(5) : TimeSpan.FromSeconds(60)))
            {
                lastUpdateTime = now;
                Task.Run(UpdateRemindersAsync);
            }

            InvokeAsync(StateHasChanged).IgnoreExceptions();
        }, null, 1_000, 1_000);
    }

    private async Task UpdateRemindersAsync()
    {
        if (Constants.Admins.Contains(userId))
        {
            reminders = await reminderService.GetAllRemindersAsync();
        }
        else
        {
            reminders = await reminderService.GetRemindersForUserAsync(userId);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (timer != null)
            await timer.DisposeAsync();
    }
}
